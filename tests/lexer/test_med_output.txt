token: Identifier   lexeme: 'haha'
token: Identifier   lexeme: 'this'
token: Identifier   lexeme: 'is'
token: Identifier   lexeme: 'fun'
token: Identifier   lexeme: 'test32case'
token: Integer      lexeme: '3'
token: Real         lexeme: '3.0'
token: Identifier   lexeme: 'is'
token: Identifier   lexeme: 'a'
token: Identifier   lexeme: 'real'
token: Integer      lexeme: '1234'
token: Identifier   lexeme: 'is'
token: Identifier   lexeme: 'an'
token: Identifier   lexeme: 'integer'
token: Real         lexeme: '0.05'
token: Identifier   lexeme: 'is'
token: Identifier   lexeme: 'a'
token: Identifier   lexeme: 'real'
token: Undefined    lexeme: '.05'
token: Identifier   lexeme: 'is'
token: Identifier   lexeme: 'undefined'
token: Integer      lexeme: '35'
token: Operator     lexeme: '>'
token: Integer      lexeme: '30'
token: Integer      lexeme: '30'
token: Operator     lexeme: '=>'
token: Integer      lexeme: '30'
token: Integer      lexeme: '30'
token: Operator     lexeme: '=<'
token: Separator    lexeme: '('
token: Integer      lexeme: '25'
token: Operator     lexeme: '+'
token: Integer      lexeme: '5'
token: Separator    lexeme: ')'
token: Keyword      lexeme: 'true'
token: Operator     lexeme: '=='
token: Keyword      lexeme: 'false'
token: Identifier   lexeme: 'True'
token: Operator     lexeme: '=='
token: Identifier   lexeme: 'False'
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '='
token: Integer      lexeme: '123'
token: Keyword      lexeme: 'while'
token: Separator    lexeme: '('
token: Keyword      lexeme: 'true'
token: Separator    lexeme: ')'
token: Separator    lexeme: '{'
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '='
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '+'
token: Integer      lexeme: '5'
token: Keyword      lexeme: 'return'
token: Separator    lexeme: '}'
token: Keyword      lexeme: 'whileend'
token: Separator    lexeme: '$$'
token: Separator    lexeme: '$$'
token: Separator    lexeme: '$$'
token: Integer      lexeme: '3'
token: Operator     lexeme: '^='
token: Integer      lexeme: '4'
token: Keyword      lexeme: 'int'
token: Identifier   lexeme: 'a'
token: Separator    lexeme: ','
token: Identifier   lexeme: 'b'
token: Separator    lexeme: ','
token: Identifier   lexeme: 'c'
token: Separator    lexeme: ';'
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '='
token: Integer      lexeme: '3'
token: Identifier   lexeme: 'b'
token: Operator     lexeme: '='
token: Integer      lexeme: '4'
token: Identifier   lexeme: 'c'
token: Operator     lexeme: '='
token: Integer      lexeme: '5'
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '>'
token: Identifier   lexeme: 'b'
token: Identifier   lexeme: 'b'
token: Operator     lexeme: '<'
token: Identifier   lexeme: 'c'
token: Identifier   lexeme: 'a'
token: Operator     lexeme: '>'
token: Operator     lexeme: '='
token: Identifier   lexeme: 'c'
token: Keyword      lexeme: 'int'
token: Keyword      lexeme: 'if'
token: Keyword      lexeme: 'else'
token: Keyword      lexeme: 'ifend'
token: Identifier   lexeme: 'elseend'
token: Identifier   lexeme: 'ut'
token: Identifier   lexeme: 'oh'
token: Keyword      lexeme: 'put'
token: Keyword      lexeme: 'get'
token: Keyword      lexeme: 'function'
token: Keyword      lexeme: 'read'
token: Keyword      lexeme: 'boolean'
token: Keyword      lexeme: 'true'
token: Keyword      lexeme: 'false'
token: Keyword      lexeme: 'return'
token: Operator     lexeme: '+'
token: Operator     lexeme: '='
token: Operator     lexeme: '-'
token: Operator     lexeme: '*'
token: Operator     lexeme: '/'
