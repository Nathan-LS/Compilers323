token: Separator    lexeme: '$$'         line:1
<Rat18F>	-->	<Opt Function Definitions>  '$$'  <Opt Declaration List>  <Statement List>  '$$'

token: Keyword      lexeme: 'int'        line:2
<Optional Declaration List>	-->	<Declaration List>  '|'  <Empty>
<Declaration List>	-->	<Declaration>  ;  <Declaration List Prime>
<Declaration>	-->	<Qualifier>  <IDs>
<Qualifier>	-->	int  '|'  boolean  '|'  real

token: Identifier   lexeme: 'a'          line:2
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ','          line:2
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>

token: Identifier   lexeme: 'b'          line:2
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ','          line:2
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>

token: Identifier   lexeme: 'c'          line:2
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ';'          line:2
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>
<Empty>	-->	e

token: Keyword      lexeme: 'get'        line:3
<Declaration List Prime>	-->	<Declaration List>  '|'  <Empty>
<Declaration List>	-->	<Declaration>  ;  <Declaration List Prime>
<Declaration>	-->	<Qualifier>  <IDs>
<Qualifier>	-->	int  '|'  boolean  '|'  real
<Empty>	-->	e
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;
<Scan>	-->	get  (  <IDs>  )  ;

token: Separator    lexeme: '('          line:3

token: Identifier   lexeme: 'a'          line:3
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ','          line:3
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>

token: Identifier   lexeme: 'b'          line:3
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ','          line:3
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>

token: Identifier   lexeme: 'c'          line:3
<IDs>	-->	IDENTIFIER  <IDs Prime>

token: Separator    lexeme: ')'          line:3
<IDs Prime>	-->	,  <IDs>  '|'  <Empty>
<Empty>	-->	e

token: Separator    lexeme: ';'          line:3

token: Keyword      lexeme: 'if'         line:5
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>

token: Separator    lexeme: '('          line:5

token: Identifier   lexeme: 'c'          line:5
<Condition>	-->	<Expression>  <Relational Operator>  <Expression>
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Operator     lexeme: '/'          line:5
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>

token: Integer      lexeme: '2'          line:5
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Operator     lexeme: '=='         line:5
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e
<Relational Operator>	-->	==  '|'  ^=  '|'  >  '|'  <  '|'  =>  '|'  =<

token: Identifier   lexeme: 'a'          line:5
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Operator     lexeme: '+'          line:5
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>

token: Integer      lexeme: '1'          line:5
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Separator    lexeme: ')'          line:5
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e

token: Separator    lexeme: '{'          line:6
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }

token: Identifier   lexeme: 'b'          line:7
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;

token: Operator     lexeme: '='          line:7

token: Identifier   lexeme: 'c'          line:7
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Operator     lexeme: '+'          line:7
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>

token: Identifier   lexeme: 'a'          line:7
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Separator    lexeme: ';'          line:7
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e

token: Separator    lexeme: '}'          line:8
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;
<Scan>	-->	get  (  <IDs>  )  ;
<While>	-->	while  (  <Condition>  )  <Statement>  whileend
<Empty>	-->	e

token: Keyword      lexeme: 'else'       line:9
<If Prime>	-->	ifend  '|'  else  <Statement>  ifend

token: Separator    lexeme: '{'          line:10
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }

token: Keyword      lexeme: 'put'        line:11
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;

token: Separator    lexeme: '('          line:11

token: Identifier   lexeme: 'a'          line:11
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Separator    lexeme: ')'          line:11
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e

token: Separator    lexeme: ';'          line:11

token: Separator    lexeme: '}'          line:12
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;
<Scan>	-->	get  (  <IDs>  )  ;
<While>	-->	while  (  <Condition>  )  <Statement>  whileend
<Empty>	-->	e

token: Keyword      lexeme: 'ifend'      line:12

token: Keyword      lexeme: 'put'        line:13
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;

token: Separator    lexeme: '('          line:13

token: Identifier   lexeme: 'b'          line:13
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Separator    lexeme: ')'          line:13
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e

token: Separator    lexeme: ';'          line:13

token: Keyword      lexeme: 'put'        line:14
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;

token: Separator    lexeme: '('          line:14

token: Identifier   lexeme: 'c'          line:14
<Expression>	-->	<Term>  <Expression Prime>
<Term>	-->	<Factor>  <Term Prime>
<Factor>	-->	-  <Primary>  '|'  <Primary>
<Primary>	-->	IDENTIFIER  '|'  INTEGER  '|'  REAL  '|'  Identifier  (  <IDs>  )  '|'  (  <Expression>  )  '|'  true  '|'  false

token: Separator    lexeme: ')'          line:14
<Term Prime>	-->	*  <Factor>  <Term Prime>  '|'  /  <Factor>  <Term Prime>
<Empty>	-->	e
<Expression Prime>	-->	+  <Term>  <Expression Prime>  '|'  -  <Term>  <Expression Prime>
<Empty>	-->	e

token: Separator    lexeme: ';'          line:14

token: Separator    lexeme: '$$'         line:15
<Statement List Prime>	-->	<Statement List>  '|'  <Empty>
<Statement List>	-->	<Statement>  <Statement List Prime>
<Statement>	-->	<Compound>  '|'  <Assign>  '|'  <If>  '|'  <Print>  '|'  <Scan>  '|'  <While>
<Compound>	-->	{  <Statement List>  }
<Assign>	-->	IDENTIFIER  =  <Expression>  ;
<If>	-->	if  (  <Condition>  )  <Statement>  <If Prime>
<Return>	-->	return  <Return Prime>
<Print>	-->	put  (  <Expression>  )  ;
<Scan>	-->	get  (  <IDs>  )  ;
<While>	-->	while  (  <Condition>  )  <Statement>  whileend
<Empty>	-->	e

Success! There are no syntax errors here! :)